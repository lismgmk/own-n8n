version: '3.8'

volumes:
  downloads:
  # prometheus_data: {}
  # grafana_data: {}
  db_storage:
  n8n_storage:
  my_db_storage:
  # grafana-storage: {}
  postgres_data:
    driver: local

services:
  postgres:
    image: postgres:11
    restart: always
    container_name: postgres
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_NON_ROOT_USER
      - POSTGRES_NON_ROOT_PASSWORD
    volumes:
      - db_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - '5432:5432'
    networks:
      - common_network

  # my_postgres:
  #   image: postgres:11
  #   restart: always
  #   container_name: my_postgres
  #   environment:
  #     - POSTGRES_USER=my_user
  #     - POSTGRES_PASSWORD=my_password
  #     - POSTGRES_DB=my_database
  #   volumes:
  #     - my_db_storage:/var/lib/postgresql/data
  #   ports:
  #     - '5433:5432'
  #   networks:
  #     - common_network

  # redis:
  #   container_name: redis
  #   image: 'redis:latest'
  #   ports:
  #     - 6379:6379
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./redis:/data
  #   command: /bin/sh -c "redis-server --requirepass password123"
  #   networks:
  #     - common_network

  # redis-commander:
  #   container_name: redis-commander
  #   depends_on:
  #     - redis
  #   hostname: redis-commander
  #   image: rediscommander/redis-commander:latest
  #   restart: always
  #   environment:
  #     - REDIS_HOSTS=redis
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=redis:6379
  #     - REDIS_PASSWORD=password123
  #   ports:
  #     - '8081:8081'
  #   networks:
  #     - common_network

  # ngrok:
  #   image: ngrok/ngrok:latest
  #   restart: unless-stopped
  #   command:
  #     - "start"
  #     - "--all"
  #     - "--config"
  #     - "/etc/ngrok.yml"
  #   volumes:
  #     - ./config/ngrok.yml:/etc/ngrok.yml
  #   ports:
  #     - 4040:4040
  #   depends_on:
  #     - n8n
  #   environment:
  #     # - NGROK_PORT=n8n:5678
  #     - NGROK_PORT=browserless:3000
  #   networks:
  #     - common_network
  # prometheus:
  #   container_name: prometheus
  #   image: prom/prometheus:v2.28.1
  #   volumes:
  #     # - ./prometheus/:/etc/prometheus/
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #     # - ../configs/prometheus.yml:/etc/prometheus/prometheus.yml
  #   # command:
  #   #   - '--config.file=/etc/prometheus/prometheus.yml'
  #   #   - '--storage.tsdb.path=/prometheus'
  #   #   - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #   #   - '--web.console.templates=/usr/share/prometheus/consoles'
  #   ports:
  #     - 9090:9090
  #   # links:
  #   #   - metrics:metrics
  #   networks:
  #     - common_network
  # grafana:
  #   container_name: grafana
  #   image: grafana/grafana:8.3.4
  #   depends_on:
  #     - prometheus
  #   ports:
  #     - 3000:3000
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     # - ./grafana/provisioning/:/etc/grafana/provisioning/
  #     - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/rabbitmq.yaml
  #     - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/prometheus.yaml
  #     - ./grafana/dashboards:/dashboards
  #   env_file:
  #     - ./grafana/config.monitoring
  #   # environment:
  #     # https://grafana.com/plugins/flant-statusmap-panel
  #     # https://grafana.com/plugins/grafana-piechart-panel
  #     # https://grafana.com/plugins/grafana-polystat-panel
  #     # https://grafana.com/plugins/jdbranham-diagram-panel
  #     # https://grafana.com/plugins/michaeldmoore-multistat-panel
  #     # https://grafana.com/plugins/vonage-status-panel
  #     # https://grafana.com/plugins/yesoreyeram-boomtable-panel
  #     # GF_INSTALL_PLUGINS: "flant-statusmap-panel,grafana-piechart-panel"
  #   networks:
  #     - common_network

  browserless:
    image: browserless/chrome:latest
    ports:
      - 3000:3000
    environment:
      # MAX_CONCURRENT_SESSIONS: 10
      - TOKEN=CEA6J8PTLND9
      - DEBUG=browserless:*
      - MAX_CONCURRENT_SESSIONS=10
      - CONNECTION_TIMEOUT=1200000
      - MAX_QUEUE_LENGTH=20
      - PREBOOT_CHROME=true
      - DEMO_MODE=true
      # - HOST=localhost
      - ENABLE_DEBUGGER=true
      # - TOKEN=${BROWSERLESS_TOKEN}
      - PORT=3000
      - WORKSPACE_DELETE_EXPIRED=true
      - ALLOW_FILE_PROTOCOL=true
      - DOWNLOAD_DIR=/downloads
    container_name: "browserless"
    volumes:
      - ./downloads:/downloads
    restart: always
    networks:
      - common_network
  n8n:
    build: 
      context: .
      dockerfile: Dockerfile
    # image: docker.n8n.io/n8nio/n8n:1.27.2
    container_name: n8n
    restart: always
    user: '${UID}:${GID}'
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - DB_LOGGING_ENABLED=true
      - DB_LOGGING_OPTIONS=all
      - NODE_FUNCTION_ALLOW_EXTERNAL=*
      - NODE_FUNCTION_ALLOW_BUILTIN=*
      - N8N_ENCRYPTION_KEY=your-encryption-key
    ports:
      - 5678:5678
    links:
      - postgres
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./store:/home/node
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - common_network
  
  # rabbitmq:
  #   networks:
  #     - common_network
  #   container_name: rabbitmq
  #   image: rabbitmq:3-management-alpine
  #   restart: always
  #   hostname: rabbitmq
  #   command: >
  #     bash -c "
  #       rabbitmq-plugins enable rabbitmq_prometheus &&
  #       rabbitmq-server
  #     "
  #   environment:
  #     - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
  #     - RABBITMQ_DEFAULT_USER=rmuser
  #     - RABBITMQ_DEFAULT_PASS=LZuSUhXKvtnh*nYM
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #     - "15692:15692"
  # postgres-keycloak:
  #   image: postgres
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   environment:
  #     POSTGRES_DB: keycloak
  #     POSTGRES_USER: keycloak
  #     POSTGRES_PASSWORD: password
  #   networks:
  #     - common_network
  #     # ports:
  #     #   - '5434:5432'
  # keycloak:
  # #   # image: quay.io/keycloak/keycloak:${KC_VERSION}
  # #   image: bitnami/keycloak:22.0.1
  # #   # command: ["start-dev", "--import-realm"]
  # #   restart: unless-stopped
  # #   environment:
  # #     KC_DB: keycloak
  # #     KC_DB_USERNAME: keycloak
  # #     KC_DB_PASSWORD: password
  # #     # KC_DB_URL: "jdbc:postgresql://postgres:5432/keycloak"
  # #     KC_METRICS_ENABLED: true
  # #     KC_LOG_LEVEL: ${KC_LOG_LEVEL}
  # #     KC_REALM_NAME: ${KC_REALM_NAME}
  # #     KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
  # #     KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
  # #     GF_URL: ${GF_HOSTNAME}:${GF_SERVER_HTTP_PORT}
  # #     GF_ADMIN_USERNAME: ${GF_ADMIN_USERNAME}
  # #     GF_ADMIN_PASSWORD: ${GF_ADMIN_PASSWORD}
  #   # image: quay.io/keycloak/keycloak:legacy
  #   image: bitnami/keycloak:22.0.1
  #   container_name: keycloak
  #   environment:
  #     DB_VENDOR: POSTGRES
  #     DB_ADDR: postgres-keycloak
  #     DB_DATABASE: keycloak
  #     DB_USER: keycloak
  #     DB_SCHEMA: public
  #     DB_PASSWORD: password
  #     KEYCLOAK_USER: admin
  #     KEYCLOAK_PASSWORD: 2156128Lis
  #     KEYCLOAK_ADMIN: admin
  #     KEYCLOAK_ADMIN_PASSWORD: 2156128Lis 
  #     # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
  #     # JDBC_PARAMS: "ssl=true"
  #   ports:
  #     - 8080:8080
  #   depends_on:
  #     - postgres-keycloak
  #   networks:
  #     - common_network
     # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   restart: unless-stopped
  #   ports:
  #     - '3000:3000'
  #   networks:
  #     - common_network
  #   volumes:
  #     - grafana-storage:/var/lib/grafana
  #     - ./config/grafana.ini:/etc/grafana/grafana.ini
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=12345678

networks:
  common_network:

  